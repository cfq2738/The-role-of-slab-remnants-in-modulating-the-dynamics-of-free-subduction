<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">Spherical_Subduction_Ref_Model</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">3</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_mesh>
        <mesh name="PressureMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="PressureMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="InputMesh"/>
        <extrude>
          <regions name="WholeMesh">
            <bottom_depth>
              <constant>
                <real_value rank="0">1.0</real_value>
              </constant>
            </bottom_depth>
            <sizing_function>
              <list>
                <real_value rank="1" shape="14">0.01 0.01 0.02 0.04 0.06 0.08 0.1 0.12 0.14 0.16 0.18 0.2 0.2 0.2</real_value>
              </list>
              <varies_only_in_depth/>
            </sizing_function>
            <top_surface_id>
              <integer_value rank="0">3</integer_value>
            </top_surface_id>
            <bottom_surface_id>
              <integer_value rank="0">2</integer_value>
            </bottom_surface_id>
          </regions>
        </extrude>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="InputMesh">
      <from_file file_name="icosahedral_mesh/icosahedron">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
      <exclude_from_mesh_adaptivity/>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
    <spherical_earth>
      <superparametric_mapping/>
      <base_geometry file_name="icosahedral_mesh/icosahedron">
        <format name="gmsh"/>
        <top_surface_ids>
          <integer_value rank="1" shape="1">3</integer_value>
        </top_surface_ids>
        <bottom_surface_ids>
          <integer_value rank="1" shape="1">2</integer_value>
        </bottom_surface_ids>
      </base_geometry>
    </spherical_earth>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period_in_timesteps>
      <constant>
        <integer_value rank="0">10</integer_value>
      </constant>
    </dump_period_in_timesteps>
    <output_mesh name="PressureMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">1</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_start/>
      <checkpoint_at_end/>
    </checkpointing>
    <stat>
      <output_at_start/>
      <output_before_adapts/>
      <output_after_adapts/>
    </stat>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">5.0e-4</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">111200000</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">2.0</real_value>
      </requested_cfl>
      <courant_number name="ControlVolumeCFLNumber">
        <mesh name="PressureMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">1.25</real_value>
      </increase_tolerance>
    </adaptive_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">3982.698885</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <python>
              <string_value type="code" language="python" lines="20">def val(X, t):
  import math
  r = math.sqrt(X[0]**2+X[1]**2+X[2]**2)
  x_component = -(X[0]/r)
  y_component = -(X[1]/r)
  z_component = -(X[2]/r)
  return [x_component, y_component, z_component]</string_value>
            </python>
          </value>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Mantle">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.</real_value>
          </reference_density>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
            <integrate_continuity_by_parts/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix"/>
              <preconditioner_matrix name="DiagonalSchurComplement"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="jacobi"/>
          <relative_error>
            <real_value rank="0">2.0e-4</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">2000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
            <buoyancy>
              <radial_gravity_direction_at_gauss_points/>
            </buoyancy>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.5</real_value>
          </relaxation>
          <theta_pressure_gradient>
            <real_value rank="0">0.5</real_value>
          </theta_pressure_gradient>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="gamg"/>
          <relative_error>
            <real_value rank="0">1.0e-5</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <multigrid_near_null_space>
            <all_components/>
          </multigrid_near_null_space>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="3">0.0 0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="FreeSurface">
          <surface_ids>
            <integer_value rank="1" shape="1">3</integer_value>
          </surface_ids>
          <type name="free_surface">
            <no_normal_stress/>
            <variable_density/>
          </type>
        </boundary_conditions>
        <boundary_conditions name="CMB">
          <surface_ids>
            <integer_value rank="1" shape="1">2</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_surface>
              <normal_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </normal_component>
              <normal_direction>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
  import math
  r = math.sqrt(X[0]**2+X[1]**2+X[2]**2)
  return X[0]/r, X[1]/r, X[2]/r</string_value>
                </python>
              </normal_direction>
            </align_bc_with_surface>
          </type>
        </boundary_conditions>
        <boundary_conditions name="ReflectiveSides">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <mesh name="PressureMesh"/>
            <algorithm name="bulk_viscosity" material_phase_support="multiple" depends="MaterialViscosity">
              <mean name="geometric"/>
            </algorithm>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
          </diagnostic>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <vector_field rank="1" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="1" dim1="dim" shape="3">1.0e-4 1.0e-4 1.0e-4</real_value>
                  </constant>
                </value>
                <output/>
                <stat>
                  <include_in_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
              </prescribed>
            </vector_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="MaterialVolumeFraction">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.1</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <cap_values>
          <upper_cap>
            <real_value rank="0">1.0</real_value>
          </upper_cap>
          <lower_cap>
            <real_value rank="0">0.0</real_value>
          </lower_cap>
        </cap_values>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="FreeSurface">
      <prognostic>
        <mesh name="PressureMesh"/>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="0">0.0</real_value>
          </constant>
        </initial_condition>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Prescribed_T">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
  import math
  r = math.sqrt(X[0]**2 + X[1]**2 + X[2]**2)
  depth_dim = (2.22 - r) * 2890.
  T = 1.0 * math.erf(depth_dim/140.)
  return T</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.1</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
      </prescribed>
    </scalar_field>
    <scalar_field rank="0" name="ViscosityLog">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="multiple">
          <string_value type="code" language="python" lines="20">import numpy
import math

mu = state.tensor_fields["Viscosity"]

assert(mu.node_count == field.node_count)

log_viscosity= numpy.zeros((1,1))

for i in range(field.node_count):
  viscosity = mu.node_val(i)[0,0]
  if viscosity != 0.0:
    log_viscosity = math.log(viscosity,10.0)
  field.set(i,log_viscosity)</string_value>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <exclude_from_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.5</real_value>
                  </constant>
                </value>
                <output>
                  <exclude_from_vtu/>
                </output>
                <stat>
                  <exclude_from_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
      </diagnostic>
    </scalar_field>
    <tensor_field rank="2" name="MaterialViscosity">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <anisotropic_symmetric>
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t):
  import math, constants
  phi = math.acos(X[1]/math.sqrt(X[2]**2 + X[0]**2 + X[1]**2))
  rho = math.sqrt(X[0]**2 + X[1]**2 + X[2]**2)
  
  max_phi = math.radians(90 - constants.lat_sp)
  min_rho = constants.lp_radius
    
  if((phi &lt;= max_phi) and (rho &gt;= min_rho)):
    visc = constants.mu_sp
  elif(constants.outer_radius - rho) &lt;= constants.D_um:
    visc = constants.mu_um
  else:
    visc = constants.mu_lm
  visc_matrix=numpy.ones((3,3))*visc
  return visc_matrix</string_value>
            </python>
          </anisotropic_symmetric>
        </value>
        <output>
          <exclude_from_vtu/>
        </output>
      </prescribed>
    </tensor_field>
    <tensor_field rank="2" name="StrainRate">
      <diagnostic>
        <algorithm name="strain_rate" material_phase_support="single " source_field_name="Velocity" source_field_type="vector"/>
        <mesh name="PressureMesh"/>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
    <tensor_field rank="2" name="Stress">
      <diagnostic>
        <algorithm name="tensor_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">import math
import numpy

visc=state.tensor_fields["Viscosity"]
S = state.tensor_fields["StrainRate"]

assert(visc.node_count == field.node_count)
assert(S.node_count == field.node_count)

stress = numpy.zeros((3,3))

for i in range(field.node_count):
  mu = visc.node_val(i)[0,0]
  epsilon_dot = S.node_val(i)
  stress = 2.0*mu*epsilon_dot
  field.set(i,stress)</string_value>
          <depends>
            <string_value lines="1">StrainRate</string_value>
          </depends>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
  </material_phase>
  <material_phase name="UpperLowerPlate">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.024242424</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <vector_field rank="1" name="Velocity">
      <aliased material_phase_name="Mantle" field_name="Velocity"/>
    </vector_field>
    <scalar_field rank="0" name="MaterialVolumeFraction">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="HyperC">
              <project_upwind_value_from_point>
                <bound_projected_value_locally/>
                <store_upwind_elements>
                  <store_upwind_quadrature/>
                </store_upwind_elements>
              </project_upwind_value_from_point>
              <courant_number name="ControlVolumeCFLNumber"/>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.0</real_value>
          </theta>
          <control_volumes>
            <maximum_courant_number_per_subcycle>
              <real_value rank="0">0.25</real_value>
              <courant_number name="ControlVolumeCFLNumber"/>
            </maximum_courant_number_per_subcycle>
            <pivot_theta>
              <real_value rank="0">0.0</real_value>
            </pivot_theta>
          </control_volumes>
        </temporal_discretisation>
        <explicit/>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val (X,t):
  import constants
  import math
  
   # convert the current point to spherical coordinate
  theta = math.atan2(X[0],X[2])#longitude
  phi = math.acos(X[1]/math.sqrt(X[2]**2 + X[0]**2 + X[1]**2)) #latitude
  rho = math.sqrt(X[0]**2 + X[1]**2 + X[2]**2)
  
  max_theta = math.radians(constants.lon_degs/2.0) + constants.theta_centre
  min_theta = math.radians(-constants.lon_degs/2.0) + constants.theta_centre
  max_phi = math.radians(90 + constants.lat_degs/2.0)
  min_phi = math.radians(90 - constants.lat_degs/2.0)
  max_rho1 = constants.outer_radius
  min_rho1 = constants.up_radius
  max_rho2 = constants.cp_radius
  min_rho2 = constants.lp_radius
  
  #find the latitudinal edge length
  lat_edge_Y = max_rho1*math.cos(max_phi) #the vertical position Y
  lat_edge_radius = math.sqrt(max_rho1**2 - lat_edge_Y**2) # x^2 + z^2 = R^2 -y^2
  lat_edge_dist = lat_edge_radius * (max_theta - min_theta) # arc length formula l = r*theta
  
  # slab tip determined by radius of curvature
  # O = [max_theta, phi, small_circle_radius - Roc] centre of curvature
  Roc = constants.Roc
  beta = constants.beta
  O_sp = [max_theta, phi, constants.outer_radius - Roc] #theta phi rho
  k = math.tan(math.radians(90 - beta))
  c = O_sp[2] -k*O_sp[0]

  r_upper = Roc - (max_rho1 - min_rho1)
  r_core = Roc - (max_rho1 - max_rho2)
  r_lower = Roc -(max_rho1 - min_rho2)

  
  if (min_phi &lt;= phi &lt;= max_phi):
    small_circle_radius = math.sqrt(max_rho1**2 - X[1]**2)
    if (min_theta &lt;= theta &lt;= max_theta) and ((min_rho1 &lt; rho) or (min_rho2 &lt;= rho &lt; max_rho2)):
      #find the distance from point to the max_theta edge
      small_circle_dist = small_circle_radius * (max_theta - theta)
      if (small_circle_dist &lt;= lat_edge_dist):
        temp = 1
      else:
        temp = 0
    elif ((theta &gt; max_theta) and (k*theta + c &lt;= rho)):
      O = [O_sp[2]*math.sin(O_sp[1])*math.sin(O_sp[0]), O_sp[2]*math.cos(O_sp[1]), O_sp[2]*math.sin(O_sp[1])*math.cos(O_sp[0])]
      OX = math.sqrt((O[0]-X[0])**2 + (O[1]-X[1])**2 + (O[2]-X[2])**2)
      if ((r_upper &lt;= OX &lt;= Roc) or (r_lower &lt;= OX &lt;r_core)):
        temp = 1
      else:
        temp = 0
    else:
      temp = 0
  else:
    temp = 0
    
  return temp</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="WeakDirichlet">
          <surface_ids>
            <integer_value rank="1" shape="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.1</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
                <tolerance>
                  <real_value rank="0">1.0e-7</real_value>
                </tolerance>
              </boundedness_iterations>
              <bounds>
                <upper_bound>
                  <real_value rank="0">1.0</real_value>
                  <apply_globally/>
                  <coupled/>
                </upper_bound>
                <lower_bound>
                  <real_value rank="0">0.0</real_value>
                  <apply_globally/>
                </lower_bound>
              </bounds>
            </bounded>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
        <priority>
          <integer_value rank="0">3</integer_value>
        </priority>
        <cap_values>
          <upper_cap>
            <real_value rank="0">1.0</real_value>
          </upper_cap>
          <lower_cap>
            <real_value rank="0">0.0</real_value>
          </lower_cap>
        </cap_values>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="StrainRateSecondInvariant">
      <diagnostic>
        <algorithm name="strain_rate_second_invariant" material_phase_support="single "/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="vonMisesViscosity">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">import constants

S = state.scalar_fields["StrainRateSecondInvariant"]

assert(S.node_count == field.node_count)

tau_yield = constants.tau_yield

for i in range(field.node_count):
  epsilon_dot = S.node_val(i)/((constants.d_nondim)**2) #re-dimensionalise strain rate 
  tau = 2*constants.mu_plate*constants.mu_nondim*epsilon_dot #re-dimensionalise mu_plate so that tau can be compared to dimensional tau yield
  if (epsilon_dot == 0.0):
    mu_vm = constants.mu_plate # mu_plate here is nondimensional - see constants.py
  elif (tau &lt; tau_yield):
    mu_vm = constants.mu_plate
  elif (tau &gt;= tau_yield):
    mu_vm = (tau_yield/(2*epsilon_dot))/constants.mu_nondim #non-dimensionalise von mises viscosity
  else:
    mu_vm = constants.mu_plate
  field.set(i,mu_vm)</string_value>
          <depends>
            <string_value lines="1">StrainRateSecondInvariant</string_value>
          </depends>
        </algorithm>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <tensor_field rank="2" name="MaterialViscosity">
      <diagnostic>
        <mesh name="PressureMesh"/>
        <algorithm name="tensor_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">S = state.scalar_fields["vonMisesViscosity"]

assert(S.node_count == field.node_count)

visc = numpy.zeros((3,3))

for i in range(field.node_count):
  mu_vm = S.node_val(i)
  for j in range(3):
    for k in range(3):
      visc[j, k] = mu_vm
  field.set(i, visc)</string_value>
          <depends>
            <string_value lines="1">vonMisesViscosity</string_value>
          </depends>
        </algorithm>
        <output/>
        <stat>
          <include_in_stat/>
        </stat>
      </diagnostic>
    </tensor_field>
  </material_phase>
  <material_phase name="CorePlate">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">1.024242424</real_value>
          </reference_density>
        </linear>
      </fluids>
    </equation_of_state>
    <vector_field rank="1" name="Velocity">
      <aliased material_phase_name="Mantle" field_name="Velocity"/>
    </vector_field>
    <scalar_field rank="0" name="MaterialVolumeFraction">
      <prognostic>
        <mesh name="PressureMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="HyperC">
              <project_upwind_value_from_point>
                <bound_projected_value_locally/>
                <store_upwind_elements>
                  <store_upwind_quadrature/>
                </store_upwind_elements>
              </project_upwind_value_from_point>
              <courant_number name="ControlVolumeCFLNumber"/>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.0</real_value>
          </theta>
          <control_volumes>
            <maximum_courant_number_per_subcycle>
              <real_value rank="0">0.25</real_value>
              <courant_number name="ControlVolumeCFLNumber"/>
            </maximum_courant_number_per_subcycle>
            <pivot_theta>
              <real_value rank="0">0.0</real_value>
            </pivot_theta>
          </control_volumes>
        </temporal_discretisation>
        <explicit/>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val (X,t):
  import constants
  import math
  
   # convert the current point to spherical coordinate
  theta = math.atan2(X[0],X[2])#longitude
  phi = math.acos(X[1]/math.sqrt(X[2]**2 + X[0]**2 + X[1]**2)) #latitude
  rho = math.sqrt(X[0]**2 + X[1]**2 + X[2]**2)
  
  max_theta = math.radians(constants.lon_degs/2.0) + constants.theta_centre
  min_theta = math.radians(-constants.lon_degs/2.0) + constants.theta_centre
  max_phi = math.radians(90 + constants.lat_degs/2.0)
  min_phi = math.radians(90 - constants.lat_degs/2.0)
  max_rho = constants.up_radius
  min_rho = constants.cp_radius
  
  #find the latitudinal edge length
  lat_edge_Y = max_rho*math.cos(max_phi) #the vertical position Y
  lat_edge_radius = math.sqrt(max_rho**2 - lat_edge_Y**2) # x^2 + z^2 = R^2 -y^2
  lat_edge_dist = lat_edge_radius * (max_theta - min_theta) # arc length formula l = r*theta
  
  # slab tip determined by radius of curvature
  # O = [max_theta, phi, small_circle_radius - Roc] centre of curvature
  Roc = constants.Roc
  beta = constants.beta
  O_sp = [max_theta, phi, constants.outer_radius - Roc] #theta phi rho
  k = math.tan(math.radians(90 - beta))
  c = O_sp[2] -k*O_sp[0]

  r_upper = Roc - (constants.outer_radius - constants.up_radius)
  r_core = Roc - (constants.outer_radius - constants.cp_radius)
  
  if (min_phi &lt;= phi &lt;= max_phi):
    small_circle_radius = math.sqrt(max_rho**2 - X[1]**2)
    if (min_theta &lt;= theta &lt;= max_theta) and (min_rho &lt;= rho &lt;= max_rho):
      #find the distance from point to the max_theta edge
      small_circle_dist = small_circle_radius * (max_theta - theta)
      if (small_circle_dist &lt;= lat_edge_dist):
        temp = 1
      else:
        temp = 0
    elif ((theta &gt; max_theta) and (k*theta + c &lt;= rho)):
      O = [O_sp[2]*math.sin(O_sp[1])*math.sin(O_sp[0]), O_sp[2]*math.cos(O_sp[1]), O_sp[2]*math.sin(O_sp[1])*math.cos(O_sp[0])]
      OX = math.sqrt((O[0]-X[0])**2 + (O[1]-X[1])**2 + (O[2]-X[2])**2)
      if (r_core &lt;= OX &lt; r_upper):
        temp = 1
      else:
        temp = 0
    else:
      temp = 0
  else:
    temp = 0
    
  return temp</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="WeakDirichlet">
          <surface_ids>
            <integer_value rank="1" shape="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <apply_weakly/>
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <exclude_from_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">0.1</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <galerkin_projection>
          <continuous>
            <bounded name="Diffuse">
              <boundedness_iterations>
                <integer_value rank="0">10000</integer_value>
                <tolerance>
                  <real_value rank="0">1.0e-7</real_value>
                </tolerance>
              </boundedness_iterations>
              <bounds>
                <upper_bound>
                  <real_value rank="0">1.0</real_value>
                  <apply_globally/>
                  <coupled/>
                </upper_bound>
                <lower_bound>
                  <real_value rank="0">0.0</real_value>
                  <apply_globally/>
                </lower_bound>
              </bounds>
            </bounded>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
        <priority>
          <integer_value rank="0">2</integer_value>
        </priority>
        <cap_values>
          <upper_cap>
            <real_value rank="0">1.0</real_value>
          </upper_cap>
          <lower_cap>
            <real_value rank="0">0.0</real_value>
          </lower_cap>
        </cap_values>
      </prognostic>
    </scalar_field>
    <tensor_field rank="2" name="MaterialViscosity">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <anisotropic_symmetric>
            <constant>
              <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="3 3">100 100 100 100 100 100 100 100 100</real_value>
            </constant>
          </anisotropic_symmetric>
        </value>
        <output>
          <exclude_from_vtu/>
        </output>
      </prescribed>
    </tensor_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period_in_timesteps>
        <integer_value rank="0">15</integer_value>
      </period_in_timesteps>
      <maximum_number_of_nodes>
        <integer_value rank="0">1000000000</integer_value>
      </maximum_number_of_nodes>
      <anisotropic_gradation>
        <tensor_field name="Gamma">
          <anisotropic_symmetric>
            <constant>
              <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="3 3">1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 1.0</real_value>
            </constant>
          </anisotropic_symmetric>
        </tensor_field>
      </anisotropic_gradation>
      <metric_advection>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FirstOrderUpwind"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <maximum_courant_number_per_subcycle>
            <real_value rank="0">0.5</real_value>
            <courant_number name="ControlVolumeCFLNumber"/>
          </maximum_courant_number_per_subcycle>
          <scale_advection_time>
            <real_value rank="0">2.5</real_value>
          </scale_advection_time>
          <control_volumes/>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres"/>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1.0e-5</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
      </metric_advection>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="3 3">0.001 0.0 0.0 0.0 0.001 0.0 0.0 0.0 0.001</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <python>
            <string_value type="code" language="python" lines="20">def val(X,t):
  import constants, math
  
  # convert the current point to spherical coordinate
  theta = math.atan2(X[0],X[2])#longitude
  phi = math.acos(X[1]/math.sqrt(X[2]**2 + X[0]**2 + X[1]**2)) #latitude
  rho = math.sqrt(X[0]**2 + X[1]**2 + X[2]**2)
  
  #0.5 degrees around the initial top surface of the plate
  max_theta = math.radians((constants.lon_degs+1)/2.0) + constants.theta_centre
  min_theta = math.radians((-(constants.lon_degs+1))/2.0) + constants.theta_centre
  max_phi = math.radians(90 + (constants.lat_degs+1)/2.0)
  min_phi = math.radians(90 - (constants.lat_degs+1)/2.0)

  if ((min_theta &lt;= theta &lt;= max_theta) and (min_phi &lt;= phi &lt;= max_phi) and (rho &gt;= 2.18)):
      max_rad = 0.0035
      max_tang = 0.0125
      max_0 = math.cos(phi)*max_rad - math.sin(phi)*max_tang
      max_1 = math.sin(phi)*math.cos(theta)*max_rad + math.cos(phi)*math.cos(theta)*max_tang - math.sin(theta)*max_tang
      max_2 = math.sin(phi)*math.sin(theta)*max_rad + math.cos(phi)*math.sin(theta)*max_tang + math.cos(theta)*max_tang
      return[[abs(max_0),0.0,0.0],[0.0,abs(max_1),0.0],[0.0,0.0,abs(max_2)]]
  else:
      return[[0.1,0.0,0.0],[0.0,0.1,0.0],[0.0,0.0,0.1]]</string_value>
          </python>
        </anisotropic_symmetric>
      </tensor_field>
      <aspect_ratio_bound>
        <real_value rank="0">5</real_value>
      </aspect_ratio_bound>
      <adapt_at_first_timestep>
        <number_of_adapts>
          <integer_value rank="0">15</integer_value>
        </number_of_adapts>
      </adapt_at_first_timestep>
      <zoltan_options>
        <partitioner>
          <scotch/>
        </partitioner>
        <final_partitioner>
          <scotch/>
        </final_partitioner>
        <element_quality_cutoff>
          <real_value rank="0">0.6</real_value>
        </element_quality_cutoff>
      </zoltan_options>
      <adapt_iterations>
        <integer_value rank="0">15</integer_value>
      </adapt_iterations>
    </hr_adaptivity>
  </mesh_adaptivity>
  <flredecomp>
    <final_partitioner>
      <scotch/>
    </final_partitioner>
    <write_extruded_mesh_only/>
  </flredecomp>
</fluidity_options>
